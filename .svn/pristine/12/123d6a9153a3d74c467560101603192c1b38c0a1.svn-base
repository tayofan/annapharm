package kr.or.annapharm.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.annapharm.dto.ProductCommandVO;
import kr.or.annapharm.dto.ProductVO;
import kr.or.annapharm.dto.ReceiveOrderCartVO;
import kr.or.annapharm.service.ProductService;
import kr.or.annapharm.service.ReceiveOrderService;

@RestController
@RequestMapping("/expert/product")

public class ProductRestController {
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private ReceiveOrderService receiveOrderService;
	
	@RequestMapping(value="/receiveOrderDetail", method = RequestMethod.POST)
	public ResponseEntity<List<ReceiveOrderCartVO>> receiveOrderDetail(int no, String type) throws Exception{
		ResponseEntity<List<ReceiveOrderCartVO>> entity = null;
		
		List<ReceiveOrderCartVO> receiveCart = receiveOrderService.getReceiveCartList(no);
		List<ReceiveOrderCartVO> orderCart = receiveOrderService.getOrderCartList(no);
		
		if(type.equals("receive")) {
			entity = new ResponseEntity<List<ReceiveOrderCartVO>>(receiveCart,HttpStatus.OK);
		}else {
			entity = new ResponseEntity<List<ReceiveOrderCartVO>>(orderCart,HttpStatus.OK);
		}
		return entity;
	}
	
	 @RequestMapping(value="/productDetail", method = RequestMethod.POST)
	   public ResponseEntity<Map<String, Object>> productDetail(int mdNo) throws Exception{
	      ResponseEntity<Map<String, Object>> entity = null;
	      List<ProductVO> detail = productService.getProductDetail(mdNo);
	      
	      Map<String, Object> map = new HashMap<String, Object>();
	      map.put("detail", detail);
	      
	      entity = new ResponseEntity<Map<String,Object>>(map, HttpStatus.OK);
	      
	      return entity;
	   }
	 
	@RequestMapping(value="/receiveOrderInsert",method=RequestMethod.POST)
		public void receiveOrderInsert(@RequestBody String medicine) throws Exception{
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat dateFormatM = new SimpleDateFormat("MM");
		ProductCommandVO pro = new ProductCommandVO();

		ObjectMapper objectMapper = new ObjectMapper();
		int maxRno = receiveOrderService.getMaxReceiveNo();
		receiveOrderService.insertReceive(maxRno + 1);
		
		List<String> medicineList = objectMapper.readValue(medicine, new TypeReference<List>() {});
		for(int i = 0; i < medicineList.size(); i++) {
			String uuid = UUID.randomUUID().toString();
			Map<String, String> medicineMap = objectMapper.readValue(medicineList.get(i), new TypeReference<Map<String,String>>() {}); // JSON 데이터를 한번 더 Map에 저장
			String mdName = (String)medicineMap.get("mdName");
			String miCompany = (String)medicineMap.get("miCompany");
			String miType = (String)medicineMap.get("miType");
			String miPos = (String)medicineMap.get("miPos");
			String miUnit = (String)medicineMap.get("miUnit");
			String mdOwnnum = (String)medicineMap.get("mediNum");
			String mdNo = (String)medicineMap.get("mdNo");
			String mediDate = (String)medicineMap.get("mediDate");
			String miPrice = (String)medicineMap.get("miPrice");
			String mdTerm = (String)medicineMap.get("mdTerm");
			
			System.out.println("제조일로부터" + mdTerm);
			System.out.println("제조일 : " + mediDate);
			Date makeDay = dateFormat.parse(mediDate);
			long a = makeDay.getTime();
			System.out.println(makeDay);
			System.out.println("a:" + a);
			
//			System.out.println(mdTerm.substring(mdTerm.length() - 1)); // 끝문자 추출
//			System.out.println(mdTerm.substring(0,mdTerm.length() - 1)); // 끝문자를 제외한 앞의 숫자 추출
			if(mdTerm.substring(mdTerm.length() - 1).equals("M")) {
				Date mType = dateFormatM.parse(mdTerm.substring(0,mdTerm.length() - 1));
				System.out.println("느엥?" + mType);
			}
			
			pro.setProductQr(uuid.substring(0,7) + mdNo);
			pro.setPharmacyCode("C2104147");	
			pro.setMdName(mdName);
			pro.setMiCompany(miCompany);
			pro.setMiType(miType);
			pro.setProductPosition(miPos);
			pro.setProductUnit(miUnit);
			pro.setProductDate(mediDate);
			pro.setProductOwnnum(mdOwnnum);
			pro.setMdNo(mdNo);
			pro.setReceiveCartPrice(miPrice);
			pro.setReceiveShelfLife(mediDate);
			pro.setReceiveCartNum(mdOwnnum);
			pro.setReceiveNo(maxRno + 1);
			if(productService.selectProductOwnStandardNum(pro.getMdNo()) != null) {
				pro.setProductOwnnumStandard(productService.selectProductOwnStandardNum(pro.getMdNo()));
			}else {
				pro.setProductOwnnumStandard("-1");
			}
			productService.insertProduct(pro);
			receiveOrderService.insertReceiveCart(pro);
		}
	}
	
	@RequestMapping(value="/receiveOrderModify",method=RequestMethod.POST)
	public void receiveOrderModify(@RequestBody String medicine) throws Exception{
		
		
	}
	
}

















