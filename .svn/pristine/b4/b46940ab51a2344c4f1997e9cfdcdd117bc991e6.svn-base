package kr.or.annapharm;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.ibatis.session.SqlSession;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;

import kr.or.annapharm.command.PageMaker;
import kr.or.annapharm.command.SalesAnalysisCommand;
import kr.or.annapharm.command.SalesByAgeCommand;
import kr.or.annapharm.command.SearchCriteria;
import kr.or.annapharm.dto.CompareMedicineVO;
import kr.or.annapharm.dto.SalesAnalysisVO;
import kr.or.annapharm.dto.SalesByAgeVO;
import kr.or.annapharm.dto.SelectListVO;

@WebAppConfiguration
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:kr/or/annapharm/context/root-context.xml")
public class SessionTest {
	
	@Autowired
	private SqlSession session;
	
//	@Before
//	public void init()throws SQLException{
//		medicineDAO = se
//	}
//	
//	@After
//	public void destroy() throws SQLException{
//		conn.close();
//	}
	
//	@Test
//	public void testSQL() throws Exception{
//		MedicineVO vo = medicineDAO.selectMedicineAll(200002787);
//		
//		List<CompareMedicineVO> company = session.selectList("Business-Mapper.selectCompareMedicine","염산염");
//		
//		Assert.assertEquals(10, company.size());
//	}
	
	@Test
	public void compareMedicineTest() throws Exception{
		List<CompareMedicineVO> compareList = session.selectList("Business-Mapper.selectCompareMedicine","240301ATB");
		
		Assert.assertEquals(28,compareList.size());
	}
	
//	@Test
//	public void selectListInsertTest() throws Exception{
//		
//		String chemistCode = "F00001";
//		int mdNo = 201907931;
//		
//		SelectListVO vo = new SelectListVO();
//		vo.setChemistCode(chemistCode);
//		vo.setMdNo(mdNo);
//		
//		
//		int result = session.update("Business-Mapper.insertSelectList",vo);
//		
//		Assert.assertEquals(1, result);
//	}
	
	@Test
	public void selectListDeleteTest() throws Exception{
		String chemistCode = "F00001";
		int mdNo = 201907931;
		
		SelectListVO vo = new SelectListVO();
		vo.setChemistCode(chemistCode);
		vo.setMdNo(mdNo);
		
		int result = session.delete("Business-Mapper.deleteSelectList",vo);
		
		Assert.assertEquals(1, result);
	}
	
	@Test
	public void selectListTest() throws Exception{
		String chemistCode = "F00001";
		
		List<SelectListVO> list = session.selectList("Business-Mapper.selectSelectList",chemistCode);
		
		Assert.assertEquals(1, list.size());
		
	}
	
	@Test
	public void salesByAgeList() throws Exception{
		
		String startDate = "2022-06-10";
		String endDate = "2022-07-10";
		
		SearchCriteria cri = new SearchCriteria();
		cri.setEndDate(endDate);
		cri.setStartDate(startDate);
		
		// DB에서 검색결과 가져오기
		List<SalesByAgeVO> list = session.selectList("Business-Mapper.salesByAgeList",cri);
		
		// 데이터가 들어갈 전체 command 리스트
		List<SalesByAgeCommand> commandList = new ArrayList<SalesByAgeCommand>();
		
//		// 잘라서 보여줄 리스트
//		List<SalesByAgeCommand> displayCommandList = new ArrayList<SalesByAgeCommand>();
		
		for(int i = 0; i < 9; i++) {
			SalesByAgeCommand manCommand = new SalesByAgeCommand();
			SalesByAgeCommand girlCommand = new SalesByAgeCommand();
			manCommand.setAge(10 * i);
			manCommand.setSex("남성");
			commandList.add(manCommand);
			
			girlCommand.setAge(10 * i);
			girlCommand.setSex("여성");
			commandList.add(girlCommand);
		}
		
		// DB데이터를 commandList에 넣기
		for(SalesByAgeVO vo : list) {
			
			for(SalesByAgeCommand command : commandList) {
				
				if(vo.getAge() == command.getAge() && vo.getSex().equals(command.getSex())) {
					if(vo.getType().equals("비처방")) {
						command.setCountNoPs(vo.getCountPs());
						command.setSumNoPrice(vo.getSumPrice());
					}else {
						command.setCountPs(vo.getCountPs());
						command.setSumPrice(vo.getSumPrice());
					}
				}
			}
		}
		Collections.sort(commandList);
		
		for(SalesByAgeCommand command : commandList) {
			System.out.println(command);
		}
	
		Assert.assertEquals(1, list.size());
	}

}
