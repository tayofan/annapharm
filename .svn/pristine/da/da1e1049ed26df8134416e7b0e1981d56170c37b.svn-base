package kr.or.annapharm.service;

import java.util.ArrayList;
import java.util.List;

import kr.or.annapharm.PharmacyAPIVO;
import kr.or.annapharm.command.SalesAnalysisCommand;
import kr.or.annapharm.command.SearchCriteria;
import kr.or.annapharm.dao.MedicienBillDAO;
import kr.or.annapharm.dao.SalesAnalysisDAO;
import kr.or.annapharm.dto.MedicienBillVO;
import kr.or.annapharm.dto.MedicienCalculatVO;
import kr.or.annapharm.dto.PrescriptionSaveLogVO;
import kr.or.annapharm.dto.RegistBillVO;
import kr.or.annapharm.dto.SalesAnalysisDetailVO;
import kr.or.annapharm.dto.SalesAnalysisVO;

public class SalesAnalysisServiceImpl implements SalesAnalysisService {

	private SalesAnalysisDAO salesAnalysisDAO;
	public void setSalesAnalysisDAO(SalesAnalysisDAO salesAnalysisDAO) {
		this.salesAnalysisDAO = salesAnalysisDAO;
	}
	private MedicienBillDAO medicienBillDAO;
	public void setMedicienBillDAO(MedicienBillDAO medicienBillDAO) {
		this.medicienBillDAO = medicienBillDAO;
	}

	// 개요 : 로그인한 유저와 같은 약국에 등록되어있는 약사들의 목록을 가져오는 메서드
	// 작성자 : 이병진
	@Override
	public List<String> getChemistsName(String loginUserPharmacyCode) throws Exception {
		return salesAnalysisDAO.selectChemistsName(loginUserPharmacyCode);
	}

	// 개요 : 약사/기간 조건에 따라 매출 목록의 데이터를 출력하기 위한 메서드
	// 작성자 : 이병진
	@Override
	public List<SalesAnalysisCommand> getSearchAnalysisList(SearchCriteria cri) throws Exception {
		// 조제수가의 정보를 가져오는 vo
		MedicienBillVO billVO = medicienBillDAO.getMedicienBill();
		int bill1 = billVO.getManageBill(); // 약국관리료
		int bill2 = billVO.getMedicineBasicBill(); // 조제기본료
		int bill3 = billVO.getTakingMedicineBill(); // 복약지도료
		int bill4 = billVO.getMedicineBill(); // 처방조제료
		int bill5 = billVO.getMedicalManageBill(); // 의약품 관리료
		int bill6 = billVO.getMedicalManageDrugBill(); // 의약품관리료(마약류)
		// 사용자가 지정한 기간/약사 조건에 따라 처방전의 정보를 가져오는 list
		List<SalesAnalysisVO> prescriptionList = salesAnalysisDAO.selectSearchAnalysisList(cri);
		// 처방전별 약품의 데이터를 담을 list
		List<MedicienCalculatVO> medicienList = null;
		// 목록을 출력할 command객체
		List<SalesAnalysisCommand> sacList = new ArrayList<SalesAnalysisCommand>();
		double total; // 약제비 총액
		double medicienTotal; // 약값 전체
		double medicineSum; // 조제료 합
		double patientFee; // 본인부담금
		int prescriptionDay; // 처방일
		String drug = null; // 마약류 확인

		for(SalesAnalysisVO vo : prescriptionList ) {
			SalesAnalysisCommand sac = new SalesAnalysisCommand();
			total = 0;
			medicienTotal = 0;
			prescriptionDay = 0;
			medicienList = salesAnalysisDAO.selectSearchAnalysisListMedicienData(vo.getPsCode());

			// 약값 구하기
			for(MedicienCalculatVO vo2 : medicienList) {
				prescriptionDay = vo2.getPreDrugDay();
				drug = vo2.getMdDrug();

				// 약가 총합
				double medicienPrice = vo2.getPreDrugNum() * vo2.getMiPrice();
				medicienTotal += medicienPrice;
			}

			// 조제료 구하기
			{
				double medicineBill = bill4; // 처방조제료
				int medicalManageBill = bill5; // 의약품관리료
				// 처방 조제료 계산(하루마다 1.1%씩 증가)
				for(int i = 1; i < prescriptionDay; i++) {
					medicineBill = Math.round(medicineBill * 1.1);
				}
				// 마약류이면 가격 변경
				if(drug != null && !drug.equals("-")) {
					medicalManageBill = bill6;
				}
				// 조제료 : 약국관리료 + 조제기본료 + 복약지도료 + 의약품관리료 + 처방조제료(원 미만 반올림)
				medicineSum = Math.round(bill1 + bill2 + bill3 + medicineBill + medicalManageBill);
			}

			// 약제비 총액 : 10원 미만 절사
			total = Math.floor((medicienTotal + medicineSum)/10) * 10;
			// 본인부담금 : 100원 미만 절사
			patientFee = Math.floor((total * 20/100)/100) * 100;

			vo.setTotalMedicienBill(total); // 총 약제비
			vo.setCharge(total - patientFee); // 청구액
			vo.setPatientCharge(patientFee); // 본인부담금
			vo.setDeposit(patientFee); // 입금액
			vo.setCompoundingFee(medicineSum); // 조제료
			vo.setMedicienBill(medicienTotal); // 약가 합산

			sac = vo.toSalesAnalysisCommand();
			sacList.add(sac);
		}
		return sacList;
	}

	@Override
	public List<SalesAnalysisDetailVO> getSalesAnalyssisDetail(String psCode) throws Exception {

		List<SalesAnalysisDetailVO> voList = salesAnalysisDAO.selectSalesAnalyssisDetail(psCode);
		int count = 0; // 총액을 계산하기 위한 변수

		for(SalesAnalysisDetailVO vo : voList) {
			count += vo.getCount();
		}
		// 리스트 첫번째 변수에 총액 저장
		voList.get(0).setPrescriptTotalFee(count);

		return voList;
	}

	@Override
	public void test(PharmacyAPIVO vo) throws Exception {
		salesAnalysisDAO.test(vo);
	}

	// 개요 : 사용자 ID를 통해 사용자의 정보와 약국 코드를 가져오는 메서드
	// 작성자 : 이병진
	@Override
	public RegistBillVO getloginUserpharmacyCode(String memId) throws Exception {
		return salesAnalysisDAO.loginUserpharmacyCode(memId);
	}

	// 개요 : 약국코드를 통해 약국의 세부 정보를 가져오는 메서드
	// 작성자 : 이병진
	@Override
	public RegistBillVO getPharmacyInfo(String memId) throws Exception {
		RegistBillVO rbvo = salesAnalysisDAO.loginUserpharmacyCode(memId);

		RegistBillVO resvo = salesAnalysisDAO.selectPharmacyInfo(rbvo);
		resvo.setMemName(rbvo.getMemName());
		resvo.setMemRegnum(rbvo.getMemRegnum());
		resvo.setPiHpid(rbvo.getPiHpid());

		return resvo;
	}

	// 개요 : 매출 현황 테이블에서 임시저장을 눌렀을 때 실행되는 메서드
	// 작성자  : 이병진
	@Override
	public void temporarilySave(PrescriptionSaveLogVO psvo, List<String> preCode) throws Exception {
		// 시퀀스로 pslogNum을 가져오기
		int pslogNum = salesAnalysisDAO.saveSEQnumFind();
		psvo.setPslogNum(pslogNum);

		// prescription_savelog 테이블 insert
		salesAnalysisDAO.prescriptionSavelogTemporarilySaveInsert(psvo);

		for(String str : preCode) {
			// savelog_prescription 테이블 insert
			salesAnalysisDAO.savelogPrescriptionSaveInsert(psvo);

			// prescription 테이블 처방전 상태 g -> u로 바꿔주기
			salesAnalysisDAO.prescriptionSaveupdate(str);
		}
	}

	// 개요 : 요양급여신청서에서 저장 버튼을 눌렀을 때 실행되는 메서드
	@Override
	public void printSave(PrescriptionSaveLogVO psvo, List<String> preCode) throws Exception {
		// 시퀀스로 pslogNum을 가져오기

	}

	@Override
	public void saveDelete(PrescriptionSaveLogVO psvo, List<String> preCode) throws Exception {
		// TODO Auto-generated method stub

	}

}
